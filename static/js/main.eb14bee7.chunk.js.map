{"version":3,"sources":["BreakLength.js","SessionLength.js","App.js","reportWebVitals.js","index.js"],"names":["BreakLength","initialTime","type","changeLength","className","id","onClick","SessionLength","App","useState","breakLength","setBreakLength","sessionLength","setSessionLength","sessionTime","setSessionTime","intervalId","setIntervalId","currentSession","setCurrentSession","beepSound","useRef","useEffect","current","play","cant","isStarted","time","minutes","Math","floor","seconds","convertTime","clearInterval","newIntervalId","setInterval","prev","load","ref","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb14bee7.chunk.js","sourcesContent":["import './BreakLength.css';\r\n\r\nconst BreakLength = ({initialTime, type, changeLength}) => {\r\n    return (\r\n        <div className=\"BreakLength\" id=\"break-label\">\r\n            <h3>Break Length</h3>\r\n            <div className=\"TimeConfig\">\r\n                <button className=\"Controler\" id=\"break-decrement\" onClick={() => changeLength(-1, type)}> - </button>\r\n                <p> {initialTime} </p>\r\n                <button className=\"Controler\" id=\"break-increment\" onClick={() => changeLength(1, type)}> + </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BreakLength;","import './SessionLength.css';\r\n\r\nconst SessionLength = ({initialTime, type, changeLength}) => {\r\n    return (\r\n        <div className=\"SessionLength\" id=\"session-label\">\r\n            <h3>Session Length</h3>\r\n            <div className=\"TimeConfig\">\r\n                <button className=\"Controler\" id=\"session-decrement\" onClick={() => changeLength(-1, type)}> - </button>\r\n                <p> {initialTime} </p>\r\n                <button className=\"Controler\" id=\"session-increment\" onClick={() => changeLength(1, type)}> + </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SessionLength;","import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport BreakLength from './BreakLength';\nimport SessionLength from './SessionLength';\n\nfunction App() {\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [sessionTime, setSessionTime] = useState(25 * 60);\n  const [intervalId, setIntervalId] = useState(null);\n  const [currentSession, setCurrentSession] = useState('Session');\n  const beepSound = useRef(null);\n\n  \n  const convertTime = (time) => {\n    let minutes = Math.floor(time / 60);\n    let seconds = time % 60;\n\n    seconds = seconds < 10 ? ('0' + seconds) : seconds;\n    minutes = minutes < 10 ? ('0' + minutes) : minutes;\n\n    return `${minutes}:${seconds}`;\n  }\n  \n  useEffect(() => {\n\n    if(sessionTime === 0){\n      beepSound.current.play();\n      if(currentSession === 'Session'){\n        setCurrentSession('Break');\n        setSessionTime(breakLength * 60);\n      } else if(currentSession === 'Break'){\n        setCurrentSession('Session');\n        setSessionTime(sessionLength * 60);\n      }\n    }\n  }, [sessionTime, currentSession, breakLength, sessionLength])\n\n  /*\n  const breakLengthIncrease = () => {\n    setBreakLength(breakLength + 1);\n  }\n\n  const breakLengthDecrease = () => {\n    if (breakLength > 0) {\n      setBreakLength(breakLength - 1);\n    }\n  }\n\n  const sessionLengthIncrease = () => {\n    setSessionLength(sessionLength + 1);\n    setSessionTime(sessionLength * 60);\n  }\n\n  const sessionLengthDecrease = () => {\n    if (sessionLength > 1) {\n      setSessionLength(sessionLength - 1)\n      setSessionTime(sessionLength * 60)\n    }\n    console.log(sessionTime)\n  }\n  */\n\n  const changeLength = (cant, type) => {\n    if(type === \"breakLength\") {\n      if(breakLength <= 1 && cant < 0){\n        return\n      }\n      setBreakLength(breakLength + cant);\n    } else {\n      if(sessionLength <= 1 && cant < 0){\n        return\n      }\n      setSessionLength(sessionLength + cant);\n      setSessionTime((sessionLength + cant) * 60);\n    }\n  }\n\n  const isStarted = intervalId !== null;\n  const handleStartStop = () => {\n    if(isStarted) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      const newIntervalId = setInterval(() => {setSessionTime(prev => prev - 1)}, 1000)\n      setIntervalId(newIntervalId);\n    }\n  }\n\n  const handleReset = () => {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setCurrentSession('Session');\n    setSessionLength(25);\n    setBreakLength(5);\n    setSessionTime(25 * 60);\n    beepSound.current.load();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Pomodoro Clock</h1>\n      <div className=\"Timers\">\n        <BreakLength id=\"break-length\" type=\"breakLength\" initialTime={breakLength} changeLength={changeLength}/>\n        <SessionLength id=\"session-length\" type=\"sessionLength\" initialTime={sessionLength} changeLength={changeLength}/>\n      </div>\n      <div className=\"Session\" id=\"timer-label\">\n        <h2>{currentSession}</h2>\n        <p id=\"time-left\">{convertTime(sessionTime)}</p>\n        <button id=\"start_stop\" onClick={handleStartStop}>{isStarted? 'Stop' : 'Start'}</button>\n        <button id=\"reset\" onClick={handleReset}>Refresh</button>\n        <audio id=\"beep\" ref={beepSound}>\n          <source src=\"https://www.soundjay.com/buttons/sounds/beep-30b.mp3\" type=\"audio/mpeg\"/>\n        </audio>\n      </div>\n      <p className=\"Cred\">by francof28</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}